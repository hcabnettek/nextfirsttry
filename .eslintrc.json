{
    "root": true,
    "env": {
        "browser": true,
        "es6": true,
        "node": true
    },
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaFeatures": {
            "jsx": true
        },
        "sourceType": "module",
        "project": "./tsconfig.json"
    },
    "plugins": [
        "@typescript-eslint",
        "@next/eslint-plugin-next",
        "eslint-plugin-react",
        "cypress"
    ],
    "rules": {},
    "settings": {
        "react": {
            "createClass": "createReactClass", // Regex for Component Factory to use,
            // default to "createReactClass"
            "pragma": "React", // Pragma to use, default to "React"
            "fragment": "Fragment",
            "version": "detect" // React version, default to the latest React stable release
        },
        "import/parsers": {
            "@typescript-eslint/parser": [
                ".ts",
                ".tsx"
            ]
        },
        "import/resolver": {
            "typescript": {
                "alwaysTryTypes": true, // always try to resolve types under `<root>@types` directory even it doesn't contain any source code, like `@types/unist`
                // Choose from one of the "project" configs below or omit to use <root>/tsconfig.json by default
                // use <root>/path/to/folder/tsconfig.json
                "project": "./tsconfig.json"
            },
            "node": {
                "extensions": [
                    ".js",
                    ".jsx",
                    ".ts",
                    ".tsx"
                ],
                "moduleDirectory": [
                    "node_modules"
                ]
            }
        },
        "propWrapperFunctions": [
            "forbidExtraProps"
        ] // The names of any functions used to wrap the
      // propTypes object, e.g. `forbidExtraProps`.
        // If this isn't set, any propTypes wrapped in
        // a function will be skipped.
    },
    "extends": [
        "eslint:recommended",
        "plugin:react/recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking", // contains rules that specifically require type information
        "plugin:@next/next/recommended",
        "next", // https://github.com/vercel/next.js/blob/canary/packages/eslint-config-next/package.json
        "next/core-web-vitals"
    ]
}